####################
# LAZY CLI OPTIONS #
####################
# Build container image from dockerfile. 
# Confirm its created with docker images.
lazy_build() {
  # check if a dockerfile exists in dir.
  if [[ -f "$DOCKERFILE" ]]; then
    docker build -f "$DOCKERFILE" -t "$IMAGE" .
  else
    echo "Generating Default Dockerfile..."
    _lazy_dockerfile | docker build -f - -t "$IMAGE" .
  fi
 }

# Run the container image. 
# TODO check if image exists and build image.
lazy_run() {
  # check if .env exists for --env-file.
  if [[ -f "$ENV_FILE" ]]; then
    echo "Running: $IMAGE with: $ENV_FILE" 
    docker run -itd --env-file $ENV_FILE --name $NAME $IMAGE && \
      clear && \
      docker ps
  else
    echo "Running: $IMAGE"
    docker run -itd --name $NAME $IMAGE && \
      clear && \
      docker ps
  fi
}

# Remove existing container and image.
lazy_rm() {
  docker rm -f $NAME 
  docker image rm -f $IMAGE
  clear
}

# Check for changes to files - delete, rebuild and run new container. 
lazy_watch() {
  last_mod=0
  while true; do
    new_mod=$(stat -c %Y *.py) 
    if [[ $new_mod != $last_mod ]]; then
      lazy_rm 
      lazy_build 
      lazy_run
      last_mod=$new_mod
    fi
    # 'logs --follow' is blocking so we run/clear inbetween 'sleep 1'
    docker logs "$NAME" 2>&1 | tee /tmp/lazy_logs.out
    sleep 1
    clear
  done
}

# Initialize project with .lazy file.
lazy_new() {
  # create local .lazy if missing
  if [[ -f .lazy ]]; then
    echo ".lazy already exists, skipping..."
  else
    cp "$HOME/.config/.lazy" .lazy
    echo "Created .lazy from user config."
  fi

  # create Dockerfile with .lazy file config if missing
  if [[ -f Dockerfile ]]; then
    echo "Dockerfile already exists, skipping..."
  else
    _lazy_dockerfile > Dockerfile
    echo "Created default Dockerfile."
  fi
}


